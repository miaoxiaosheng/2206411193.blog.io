<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[加密功能测试]]></title>
    <url>%2F2018%2F07%2F22%2F%E5%8A%A0%E5%AF%86%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[sdsdsds]]></content>
      <tags>
        <tag>password</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[打赏功能测试]]></title>
    <url>%2F2018%2F07%2F22%2Fspringmvc%E6%8B%A6%E6%88%AA%E5%99%A8%2F</url>
    <content type="text"><![CDATA[springmvc拦截器地方大幅度发]]></content>
  </entry>
  <entry>
    <title><![CDATA[又是一波测试]]></title>
    <url>%2F2018%2F07%2F19%2F%E5%8F%88%E6%98%AF%E4%B8%80%E6%B3%A2%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[放在github page上的静态网站怎么取消绑定自定义域名？博客域名github购买域名后添加了 @ CNAME 我的用户名.github.io blog A 192.30.252.154 blog A 192.30.252.153 三条记录然后在gh-pages分支上添加了内容为blog.我的域名.cn的CNAME文件 但是访问的时候一直说服务器未响应，应该是github page给的ip的问题 所以现在想改回来直接用 用户名.github.io来访问 于是删掉了CNAME文件，但是访问 用户名.github.io 的时候还是跳转到blog.我的域名.cn 怎么取消绑定？]]></content>
  </entry>
  <entry>
    <title><![CDATA[测试]]></title>
    <url>%2F2018%2F07%2F19%2F%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[日常更新 发表于 2018-07-19 | 更新于: 2018-07-19 | 阅读次数: 字数统计: | 阅读时长 ≈【最新】2018 hosts 持续更新【更新于:2018-06-13】 发表评论 306,709A+所属分类：hosts本页面长期更新2018年最新Google、谷歌学术、维基百科、ccFox.info、ProjectH、Battle.NET 、WordPress、Microsoft Live、Gi …阅读全文 »item2 发表于 2018-07-19 | 更新于: 2018-07-19 | 阅读次数: 字数统计: | 阅读时长 ≈阅读全文 »好困啊 发表于 2018-07-18 | 更新于: 2018-07-18 | 阅读次数: 字数统计: | 阅读时长 ≈阅读全文 »springMVC 发表于 2018-07-17 | 更新于: 2018-07-17 | 阅读次数: 字数统计: | 阅读时长 ≈Spring MVC 学习总结（八）——Spring MVC概要与环境配置（IDEA+Maven+Tomcat7+JDK8、示例与视频]]></content>
  </entry>
  <entry>
    <title><![CDATA[日常更新]]></title>
    <url>%2F2018%2F07%2F19%2F%E6%97%A5%E5%B8%B8%E6%9B%B4%E6%96%B0%2F</url>
    <content type="text"><![CDATA[【最新】2018 hosts 持续更新【更新于:2018-06-13】 发表评论 306,709A+所属分类：hosts本页面长期更新2018年最新Google、谷歌学术、维基百科、ccFox.info、ProjectH、Battle.NET 、WordPress、Microsoft Live、GitHub、Amazon、Archive、Box.com、Disqus、SoundCloud、inoreader、Feedly、FlipBoard、Twitter、Tumblr、Facebook、Flickr、imgur、Instagram、DuckDuckGo、Ixquick、Yahoo、Google Services、Google apis、Android、Youtube、Google Drive、UpLoad、Appspot、Googl eusercontent、Gstatic、Gmail、Google other、Google Play等hosts。 致谢：Github项目维护者 @beyondgfw等众人… 感谢那些帮助、支持、以及批评、指责、攻击过老D博客的人们！ hosts是一个没有扩展名的系统文件，它并不是软件或者工具。 【最新】2018 hosts 持续更新【更新于:2018-06-13】 hosts所在文件夹：Windows 系统hosts位于 C:\Windows\System32\drivers\etc\hostsAndroid（安卓）系统hosts位于 /etc/hostsMac（苹果电脑）系统hosts位于 /etc/hostsiPhone（iOS）系统hosts位于 /etc/hostsLinux系统hosts位于 /etc/hosts绝大多数Unix系统都是在 /etc/hosts你也可以用Notepad++ 自行转换文本编码和换行符格式。当然，老D分享的都转换好了。 若更新后，hosts 没有立即生效，请重置网络：在系统设置内开关网络，或启用禁用飞行模式，或者重启、刷新DNS缓存、浏览器缓存。 注意：Google、Gmail、维基百科、Twitter、Facebook等必须请用https加密方式打开。一般这些网站都是SSL加密链接，如： 谷歌学术：https://scholar.google.com/谷歌：https://www.google.com/ncr谷歌香港：https://www.google.com.hk/ncr 另外可能有的地区&amp;网络（铁通、联通）hosts无法正常使用，这个不是你我能左右的！建议不要使用国产浏览器，国产软件也是，特别是360，因为国产浏览器即使你使用https它也会强制你使用默认http，还有就是会上传用户数据，尽可能使用Chrome下载&amp;修改hosts安全软件可能会“报毒”（误报）你可以暂时退出或者添加信任即可！ 老D服务器&amp;百度网盘hosts下载：文件下载百度网盘提取码：laod 解压密码：laod里面包含Windows &amp; Mac 、Android &amp; Linux请对号入座。另外windows可以直接运行批处理命令，hosts会自动替换（如果无法自动替换，请用管理员身份权限手动修改）注意：批处理命令会直接覆盖现有hosts，如现有hosts内容重要的话请备份后再使用，或者手动修改！ 老D所提供的hosts仅限于学习使用！hosts里不会添加屏蔽广告条目，也不会劫持任何网站。 修改hosts后生效方法：Windows开始 -&gt; 运行 -&gt; 输入cmd -&gt; 在CMD窗口输入ipconfig /flushdnsLinux终端输入sudo rcnscd restart对于systemd发行版，请使用命令 sudo systemctl restart NetworkManager如果不懂请都尝试下 Mac OS X终端输入sudo killall -HUP mDNSResponderAndroid开启飞行模式 -&gt; 关闭飞行模式通用方法拔网线(断网) -&gt; 插网线(重新连接网络)如不行请清空浏览器缓存（老D建议不要使用国产浏览器，请使用谷歌Chrome浏览器）]]></content>
  </entry>
  <entry>
    <title><![CDATA[item2]]></title>
    <url>%2F2018%2F07%2F19%2Fitem2%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[好困啊]]></title>
    <url>%2F2018%2F07%2F18%2F%E5%A5%BD%E5%9B%B0%E5%95%8A%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[springMVC]]></title>
    <url>%2F2018%2F07%2F17%2FspringMVC%2F</url>
    <content type="text"><![CDATA[Spring MVC 学习总结（八）——Spring MVC概要与环境配置（IDEA+Maven+Tomcat7+JDK8、示例与视频）目录 一、MVC概要二、Spring MVC介绍2.1、学习资料三、第一个Spring MVC 项目：Hello World3.1、IntelliJ IDEA中创建一个Maven项目3.2、添加Web项目支持3.3、配置Tomcat Web容器3.4、将项目发布到Git远程仓库（非必要）3.5、添加依赖的jar包3.6、将依赖的包添加到项目发布文件中3.7、修改web.xml注册中心控制器DispatcherServlet3.8、添加Spring MVC配置文件3.9、创建HelloWorld控制器3.10、创建视图3.11、测试运行四、用户管理示例4.1、用户Bean4.2、用户数据访问对象4.3、用户业务对象4.4、控制器4.5、用户视图4.6、Spring-MVC配置文件五、示例下载六、视频七、作业一、MVC概要MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范，用一种将业务逻辑、数据、显示分离的方法组织代码，MVC主要作用是降低了视图与业务逻辑间的双向偶合。MVC不是一种设计模式，MVC是一种架构模式。当然不同的MVC存在差异。 在web早期的开发中，通常采用的都是Model1。Model1中，如图所示主要分为两层，视图层和模型层。Model2把一个项目分成三部分，包括视图、控制、模型。这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。 Model1 Model2 常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：angularjs、reactjs、vue.js；由MVC演化出了另外一些模式如：MVP、MVVM。 二、Spring MVC介绍Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。Spring MVC的特点：1、轻量2、高效3、与Spring兼容性好4、功能强大RESTful、数据验证、格式化、绑定机制、本地化、主题等5、简洁灵活 Spring的web框架围绕DispatcherServlet设计。 DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。官网上说Spring的web模块提供了大量独特的功能，包括:清晰的角色划分：控制器（controller）、验证器（validator）、 命令对象（command object）、表单对象（form object）、模型对象（model object）、 Servlet分发器（DispatcherServlet）、 处理器映射（handler mapping）、视图解析器（view resolver）等等。 每一个角色都可以由一个专门的对象来实现。 强大而直接的配置方式：将框架类和应用程序类都能作为JavaBean配置，支持跨多个context的引用，例如，在web控制器中对业务对象和验证器（validator）的引用。 可适配、非侵入：可以根据不同的应用场景，选择合适的控制器子类 （simple型、command型、form型、wizard型、multi-action型或者自定义），而不是从单一控制器 （比如Action/ActionForm）继承。 可重用的业务代码：可以使用现有的业务对象作为命令或表单对象，而不需要去扩展某个特定框架的基类。 可定制的绑定（binding） 和验证（validation）：比如将类型不匹配作为应用级的验证错误， 这可以保存错误的值。再比如本地化的日期和数字绑定等等。在其他某些框架中，你只能使用字符串表单对象， 需要手动解析它并转换到业务对象。 可定制的handler mapping和view resolution：Spring提供从最简单的URL映射， 到复杂的、专用的定制策略。与某些web MVC框架强制开发人员使用单一特定技术相比，Spring显得更加灵活。 灵活的model转换：在Springweb框架中，使用基于Map的 键/值对来达到轻易地与各种视图技术的集成。 可定制的本地化和主题（theme）解析：支持在JSP中可选择地使用Spring标签库、支持JSTL、支持Velocity（不需要额外的中间层）等等。 简单而强大的JSP标签库（Spring Tag Library）：支持包括诸如数据绑定和主题（theme） 之类的许多功能。它提供在标记方面的最大灵活性。 JSP表单标签库：在Spring2.0中引入的表单标签库，使得在JSP中编写 表单更加容易。 Spring Bean的生命周期可以被限制在当前的HTTP Request或者HTTP Session。 准确的说，这并非Spring MVC框架本身特性，而应归属于Sping MVC使用的WebApplicationContext容器。 2.1、学习资料http://7xvpsh.com1.z0.glb.clouddn.com/ Spring MVC翻译 http://spring.cndocs.tk/ Spring翻译 http://blog.csdn.net/tangtong1/article/details/51326887 Spring 1-6章 https://github.com/linesh-simplicity/translation-spring-mvc-4-documentation 翻译列表 https://docs.spring.io/spring-framework/docs/4.2.4.RELEASE/spring-framework-reference/html/mvc.html 官方帮助 三、第一个Spring MVC 项目：Hello World3.1、IntelliJ IDEA中创建一个Maven项目在IntelliJ IDEA中新建Maven项目，选择“File-&gt;New-&gt;Project”，创建一个简单项目，不选择模板。 选择“Maven”，不需要使用内置结构（模板） 填写包名与项目名： 选择项目位置，尽量不要有中文、空格或特殊字符，点击完成： 完成后点击“Enable-Auto import” 3.2、添加Web项目支持前面我们创建好了一个普通的Java项目，现在需要将普通项目转换成Web项目 选择“Web Application” 点击OK后项目就变成Web项目了，且根据Maven风格创建了不同类型的文件夹 如果使用内置架构创建则需要手动添加不同的文件夹类型 3.3、配置Tomcat Web容器点击右侧下拉列表，选择编辑配置文件 在配置窗口中点中左上角的“加号”-&gt;Tomcat Server-&gt;”Local” 命名 添加部署包 设置项目的虚拟目录名称（Application context应用上下文） 选择修改项目后服务器动作 修改index.jsp文件后运行项目 启动项目后的运行结果： 注意这里的tomcat的日志与eclipse整合后是不一样的，分开在多个窗口中输出。 3.4、将项目发布到Git远程仓库（非必要）点击“VCS”-&gt;”Enable Version Control Integration”，将项目集成到版本控制器中 选择版本控制器类型为Git 提交项目到本地仓库 选择要提交的文件并填写好日志信息： 管理远程仓库地址 点击加号添加 添加成功后 提交到远程仓库 点击push 提交成功 查看结果 3.5、添加依赖的jar包1、修改pom.xml文件、添加jar包的依赖，主要有：Spring框架核心库、Spring MVC、JSTL等，具体信息如下： 复制代码&lt;?xml version=”1.0” encoding=”UTF-8”?&gt; 4.0.0 &lt;groupId&gt;com.zhangguo&lt;/groupId&gt; &lt;artifactId&gt;springmvc08&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;spring.version&gt;4.3.0.RELEASE&lt;/spring.version&gt; &lt;/properties&gt; &lt;!--项目依赖 --&gt; &lt;dependencies&gt; &lt;!--单元测试--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.10&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!--j2ee相关包 servlet、jsp、jstl--&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt; &lt;artifactId&gt;jsp-api&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--mysql驱动包--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.35&lt;/version&gt; &lt;/dependency&gt; &lt;!--spring相关包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;${spring.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!--其他需要的包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;3.4&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;maven-springmvc&lt;/finalName&gt; &lt;resources&gt; &lt;!--表示把java目录下的有关xml文件,properties文件编译/打包的时候放在resource目录下--&gt; &lt;resource&gt; &lt;directory&gt;${basedir}/src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;${basedir}/src/main/resources&lt;/directory&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;plugins&gt; &lt;!--servlet容器 jetty插件--&gt; &lt;plugin&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt; &lt;version&gt;9.3.10.v20160621&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; 复制代码如果需要其它的包可以去中心仓库搜索 如果下载太慢可以将maven的远程中心仓库的地址换成国内仓库。 默认会自动下载jar包，第一次下载会较慢，以后从本地引用就会快很多 当依赖成功时，会加载的jar包如下： 将maven依赖的包添加到项目中，发布时一起打包 3.6、将依赖的包添加到项目发布文件中点击项目结构（ctrl+shift+alt+s） 点击“Artifacts”-&gt;”Output Layout”-&gt;双击要输出的包 成功添加后在lib目录下就可以看到输出的包了 3.7、修改web.xml注册中心控制器DispatcherServletSpring MVC框架像许多其他MVC框架一样, 请求驱动,围绕一个中心Servlet分派请求及提供其他功能，DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)。如下图所示当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。 修改web.xml文件注册该Servlet，修改后的web.xml文件如下： 复制代码&lt;?xml version=”1.0” encoding=”UTF-8”?&gt; &lt;!--welcome pages--&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;!--配置springmvc DispatcherServlet--&gt; &lt;servlet&gt; &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;!--Sources标注的文件夹下需要新建一个spring文件夹--&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath*:spring/spring-mvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;async-supported&gt;true&lt;/async-supported&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springMVC&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; &lt;filter&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;forceEncoding&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; 复制代码3.8、添加Spring MVC配置文件在src/main/resources源代码目录下添加spring目录与spring-mvc.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下： 复制代码&lt;?xml version=”1.0” encoding=”UTF-8”?&gt; context:annotation-config/ &lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt; &lt;context:component-scan base-package=&quot;com.zhangguo.springmvc08.controller&quot;&gt; &lt;context:include-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt; &lt;/context:component-scan&gt; &lt;!--HandlerMapping 无需配置，springmvc可以默认启动--&gt; &lt;!--静态资源映射--&gt; &lt;mvc:default-servlet-handler/&gt; &lt;!--如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处--&gt; &lt;!--本项目把静态资源放在了WEB-INF的statics目录下，资源映射如下--&gt; &lt;!--&lt;mvc:resources mapping=&quot;/css/**&quot; location=&quot;/WEB-INF/statics/css/&quot;/&gt;--&gt; &lt;!--&lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/WEB-INF/statics/js/&quot;/&gt;--&gt; &lt;!--&lt;mvc:resources mapping=&quot;/image/**&quot; location=&quot;/WEB-INF/statics/image/&quot;/&gt;--&gt; &lt;!--但是项目部署到linux下发现WEB-INF的静态资源会出现无法解析的情况，但是本地tomcat访问正常，因此建议还是直接把静态资源放在webapp的statics下，映射配置如下--&gt; &lt;!--&lt;mvc:resources mapping=&quot;/css/**&quot; location=&quot;/statics/css/&quot;/&gt;--&gt; &lt;!--&lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/statics/js/&quot;/&gt;--&gt; &lt;!--&lt;mvc:resources mapping=&quot;/image/**&quot; location=&quot;/statics/images/&quot;/&gt;--&gt; &lt;!-- 配置注解驱动 可以将request参数与绑定到controller参数上 --&gt; &lt;mvc:annotation-driven/&gt; &lt;!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP--&gt; &lt;!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- --&gt; &lt;bean id=&quot;defaultViewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;&lt;!--设置JSP文件的目录位置--&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt; &lt;/bean&gt; &lt;!-- springmvc文件上传需要配置的节点--&gt; &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt; &lt;property name=&quot;maxUploadSize&quot; value=&quot;20971500&quot;/&gt; &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;/&gt; &lt;property name=&quot;resolveLazily&quot; value=&quot;true&quot;/&gt; &lt;/bean&gt; 复制代码在视图解析中我们把所有的视图都存放在/WEB-INF/目录下，这样是为了视图安全，因为这个目录客户端不能直接访问。 3.9、创建HelloWorld控制器在src/main/java源代码目录下创建包com.zhangguo.springmvc08.controller，在包下创建一个普通的类：HomeController，具体代码如下： 复制代码package com.zhangguo.springmvc08.controller; import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping; @Controller //声明为控制器@RequestMapping(path = “/home”) //请求映射public class HomeController { @RequestMapping(path = “/index”) //请求映射 public String index(Model model){ model.addAttribute(“message”,”Hello Spring MVC!”); return “home/index”; }}复制代码 注解为@Controller是为了让Spring IOC容器初始化时自动扫描到；@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/home/index；方法中声明Model类型的参数是为了把Action中的数据带到视图中；方法返回的结果是视图的名称index。 3.10、创建视图在WEB-INF/view目录中创建视图，视图将从Action中带回的信息展示，具体内容如下： 复制代码&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;&lt;%@ taglib prefix=”c” uri=”http://java.sun.com/jsp/jstl/core&quot; %&gt;&lt;!doctype html&gt; Document ${message}复制代码 3.11、测试运行启动Tomcat运行项目，请注意查看启动信息，如果有异常应该先解决异常信息，运行成功后的结果如下所示： 四、用户管理示例使用Spring MVC实现一个简单的用户管理示例，项目结构如下 运行结果： 4.1、用户Bean用户实体类user.java 复制代码package com.zhangguo.springmvc08.entity; /*** 用户*/public class User { public User(int id, String name, String address, String phone) { this.id = id; this.name = name; this.address = address; this.phone = phone; } public User() { } /** 编号*/private int id;/** 姓名*/private String name;/** 地址*/private String address;/** 电话*/private String phone; public int getId() { return id;} public void setId(int id) { this.id = id;} /** 姓名*/public String getName() { return name;} /** 姓名*/public void setName(String name) { this.name = name;} public String getAddress() { return address;} public void setAddress(String address) { this.address = address;} public String getPhone() { return phone;} public void setPhone(String phone) { this.phone = phone;}}复制代码4.2、用户数据访问对象用户数据访问接口 IUserDAO 复制代码package com.zhangguo.springmvc08.dao; import com.zhangguo.springmvc08.entity.User; import java.util.List; /** 用户数据访问接口/public interface IUserDAO { /**获得所有/ List getAll(); /根据用户编号获得用户对象*/ User getUserById(int id); /新增/ boolean add(User user); /**删除/ boolean delete(int id); /*更新/ boolean update(User user);}复制代码UserDAO.java 复制代码package com.zhangguo.springmvc08.dao; import com.zhangguo.springmvc08.entity.User;import org.springframework.stereotype.Repository; import java.util.ArrayList;import java.util.List; /** 用户数据访问对象*/@Repositorypublic class UserDAO implements IUserDAO { private static List users = new ArrayList(); static { users.add(new User(1, &quot;刘德华&quot;, &quot;中国香港&quot;, &quot;13767890098&quot;)); users.add(new User(2, &quot;张学友&quot;, &quot;中国广东&quot;, &quot;18989890767&quot;)); users.add(new User(3, &quot;张国立&quot;, &quot;中国北京&quot;, &quot;13345672345&quot;)); users.add(new User(4, &quot;张靓因&quot;, &quot;中国上海&quot;, &quot;15890908679&quot;)); users.add(new User(5, &quot;齐萍萍&quot;, &quot;中国珠海&quot;, &quot;13246712235&quot;)); } /** 获得所有*/public List getAll() { return users;} /** 单个用户*/public User getUserById(int id) { for (User user : users) { if (user.getId() == id) { return user; } } return null;} /** 添加*/public boolean add(User user) { if(user.getId()&lt;=0) { user.setId(users.get(users.size()-1).getId()+1); } users.add(user); return true;} /** 删除*/public boolean delete(int id) { users.remove(getUserById(id)); return true;} /** 更新*/public boolean update(User user) { User oldUser = getUserById(user.getId()); oldUser.setName(user.getName()); oldUser.setAddress(user.getAddress()); oldUser.setPhone(user.getPhone()); return true;}}复制代码4.3、用户业务对象用户业务类UserService.java 复制代码package com.zhangguo.springmvc08.service; import com.zhangguo.springmvc08.dao.IUserDAO;import com.zhangguo.springmvc08.dao.UserDAO;import com.zhangguo.springmvc08.entity.User;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service; import javax.annotation.Resource;import java.util.List; /*用户业务/@Servicepublic class UserService { @Autowired IUserDAO userdao; public List&lt;User&gt; queryAllUsers(){ return userdao.getAll(); } public User getUserById(int id){ return userdao.getUserById(id); } public boolean deleteUser(int id){ return userdao.delete(id); } public boolean addUser(User user){ return userdao.add(user); } public boolean editUser(User user){ return userdao.update(user); } }复制代码4.4、控制器用户控制器UserController.java 复制代码package com.zhangguo.springmvc08.controller; import com.zhangguo.springmvc08.entity.User;import com.zhangguo.springmvc08.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod; @Controller //声明为控制器@RequestMapping(path = “/user”) //请求映射public class UserController { @Autowired UserService userService; @RequestMapping(path = &quot;/index&quot;) //请求映射 public String index(Model model){ model.addAttribute(&quot;list&quot;,userService.queryAllUsers()); return &quot;user/index&quot;; } @RequestMapping(&quot;/delete/{id}&quot;) public String delete(@PathVariable int id){ userService.deleteUser(id); return &quot;redirect:/user/index&quot;; } @RequestMapping(&quot;/add&quot;) public String add(){ return &quot;user/add&quot;; } @RequestMapping(value = &quot;/add&quot;,method = RequestMethod.POST) public String add(User user){ userService.addUser(user); return &quot;redirect:/user/index&quot;; } @RequestMapping(&quot;/edit/{id}&quot;) public String edit(@PathVariable int id,Model model){ model.addAttribute(&quot;user&quot;,userService.getUserById(id)); return &quot;user/edit&quot;; } @RequestMapping(value = &quot;/edit&quot;,method = RequestMethod.POST) public String edit(User user){ userService.editUser(user); return &quot;redirect:/user/index&quot;; } }复制代码4.5、用户视图列表：user/index.jsp 复制代码&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;&lt;%@ taglib prefix=”c” uri=”http://java.sun.com/jsp/jstl/core&quot; %&gt;&lt;!doctype html&gt; 用户管理 用户管理 编号 姓名 地址 电话 操作 &lt;c:forEach items=”${list}” var=”user”&gt; ${user.id} ${user.name} ${user.address} ${user.phone} 删除 | 修改 &lt;/c:forEach&gt; 新增 var items = document.querySelectorAll(“.del”); for (var i = 0; i &lt; items.length; i++) { items[i].onclick = function () { return confirm(“您确认要删除吗？”); } }复制代码 新增：user/add.jsp 复制代码&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;&lt;%@ taglib prefix=”c” uri=”http://java.sun.com/jsp/jstl/core&quot; %&gt;&lt;!doctype html&gt; 用户管理 添加用户 用户信息 姓名： 地址： 电话： 提交 列表复制代码 编辑：user/edit.jsp 复制代码&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;&lt;%@ taglib prefix=”c” uri=”http://java.sun.com/jsp/jstl/core&quot; %&gt;&lt;!doctype html&gt; 用户管理 修改用户 用户信息 编号： 姓名： 地址： 电话： 提交 列表L2Dwidget.init({"log":false,"pluginJsPath":"lib/","pluginModelPath":"assets/","pluginRootPath":"live2dw/","tagMode":false});复制代码 4.6、Spring-MVC配置文件resources/spring/spring-mvc.xml 复制代码&lt;?xml version=”1.0” encoding=”UTF-8”?&gt; &lt;!--启用spring的一些annotation --&gt; &lt;context:annotation-config/&gt; &lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt; &lt;context:component-scan base-package=&quot;com.zhangguo.springmvc08&quot;&gt; &lt;/context:component-scan&gt; &lt;!--HandlerMapping 无需配置，springmvc可以默认启动--&gt; &lt;!--静态资源映射--&gt; &lt;mvc:default-servlet-handler/&gt; &lt;!--如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处--&gt; &lt;!--本项目把静态资源放在了WEB-INF的statics目录下，资源映射如下--&gt; &lt;!--&lt;mvc:resources mapping=&quot;/css/**&quot; location=&quot;/WEB-INF/statics/css/&quot;/&gt;--&gt; &lt;!--&lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/WEB-INF/statics/js/&quot;/&gt;--&gt; &lt;!--&lt;mvc:resources mapping=&quot;/image/**&quot; location=&quot;/WEB-INF/statics/image/&quot;/&gt;--&gt; &lt;!--但是项目部署到linux下发现WEB-INF的静态资源会出现无法解析的情况，但是本地tomcat访问正常，因此建议还是直接把静态资源放在webapp的statics下，映射配置如下--&gt; &lt;!--&lt;mvc:resources mapping=&quot;/css/**&quot; location=&quot;/statics/css/&quot;/&gt;--&gt; &lt;!--&lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/statics/js/&quot;/&gt;--&gt; &lt;!--&lt;mvc:resources mapping=&quot;/image/**&quot; location=&quot;/statics/images/&quot;/&gt;--&gt; &lt;!-- 配置注解驱动 可以将request参数与绑定到controller参数上 --&gt; &lt;mvc:annotation-driven/&gt; &lt;!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP--&gt; &lt;!-- 默认的视图解析器 在上边的解析错误时使用 (默认使用html)- --&gt; &lt;bean id=&quot;defaultViewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.JstlView&quot;/&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;&lt;!--设置JSP文件的目录位置--&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt; &lt;/bean&gt; &lt;!-- springmvc文件上传需要配置的节点--&gt; &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt; &lt;property name=&quot;maxUploadSize&quot; value=&quot;20971500&quot;/&gt; &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;/&gt; &lt;property name=&quot;resolveLazily&quot; value=&quot;true&quot;/&gt; &lt;/bean&gt; 复制代码五、示例下载https://git.coding.net/zhangguo5/SpringMVC08.git 点击下载示例 六、视频https://www.bilibili.com/video/av16991874/ 七、作业6.1、请使用Spring MVC在页面上显示当前日期 6.2、请使用Spring MVC完成如下功能（三选一），可以不使用数据库，直接使用集合就可以了]]></content>
  </entry>
  <entry>
    <title><![CDATA[渣渣]]></title>
    <url>%2F2018%2F07%2F16%2F%E6%B8%A3%E6%B8%A3%2F</url>
    <content type="text"><![CDATA[按时大大大是大大说的佛山分公司鬼斧神工水电费付付付付付付付付所付多所付]]></content>
  </entry>
  <entry>
    <title><![CDATA[小木屋]]></title>
    <url>%2F2017%2F12%2F01%2Foffer-0%2F</url>
    <content type="text"><![CDATA[转载请注明作者和出处：www.qiuzhibin.com 前言第一篇小博客]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
</search>
